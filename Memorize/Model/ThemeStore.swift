//
//  ThemeStore.swift
//  Memorize
//
//  Created by –î–∞–Ω–∏—è–ª on 27.09.2022.
//

import Foundation

struct Theme : Codable, Identifiable, Hashable
{
    var named: String
    var rgbaColor: RGBAColor
    var contents: String
    var countCard: Int
    let id: Int
    
    fileprivate init(named: String, color: RGBAColor, contents: String, countCard: Int, id: Int) {
        self.named = named
        self.rgbaColor = color
        self.contents = contents
        self.countCard = countCard
        self.id = id
    }
}

class ThemeStore: ObservableObject {
    let name: String
    @Published private(set) var currentThemeIndex = 0;
        
    @Published var themes = [Theme]() {
        didSet {
            storeInUserDefaults()
        }
    }
    
    private var userDefaultsKey: String {
        "ThemeStore:" + name
    }
        
    private func storeInUserDefaults() {
        UserDefaults.standard.set(try? JSONEncoder().encode(themes), forKey: userDefaultsKey)
    }
        
    private func restoreFromUserDefaults() {
        if let jsonData = UserDefaults.standard.data(forKey: userDefaultsKey),
           let decodedPalettes = try? JSONDecoder().decode(Array<Theme>.self, from: jsonData) {
            themes = decodedPalettes
        }
    }
        
    init(named name: String) {
        self.name = name
        restoreFromUserDefaults()
        if themes.isEmpty {
            insertTheme(named: "Vehicles",
                          color: RGBAColor(color: .blue),
                          countCard: 6,
                          contents: "üöôüöóüöòüöïüöñüèéüööüõªüöõüöêüöìüöîüöëüöíüöÄ‚úàÔ∏èüõ´üõ¨üõ©üöÅüõ∏üö≤üèçüõ∂‚õµÔ∏èüö§üõ•üõ≥‚õ¥üö¢üöÇüöùüöÖüöÜüöäüöâüöáüõ∫üöú")
            insertTheme(named: "Sports",
                          color: RGBAColor(color: .red),
                          countCard: 6,
                          contents: "üèà‚öæÔ∏èüèÄ‚öΩÔ∏èüéæüèêü•èüèì‚õ≥Ô∏èü•Öü•åüèÇ‚õ∑üé≥")
            insertTheme(named: "Music",
                          color: RGBAColor(color: .red),
                          countCard: 4,
                          contents: "üéºüé§üéπü™òü•Åüé∫ü™óü™ïüéª")
            insertTheme(named: "Animals",
                          color: RGBAColor(color: .green),
                          countCard: 12,
                          contents: "üê•üê£üêÇüêÑüêéüêñüêèüêëü¶ôüêêüêìüêÅüêÄüêíü¶Üü¶Öü¶âü¶áüê¢üêçü¶éü¶ñü¶ïüêÖüêÜü¶ìü¶çü¶ßü¶£üêòü¶õü¶èüê™üê´ü¶íü¶òü¶¨üêÉü¶ôüêêü¶åüêïüê©ü¶Æüêàü¶§ü¶¢ü¶©üïäü¶ùü¶®ü¶°ü¶´ü¶¶ü¶•üêøü¶î")
            insertTheme(named: "Animal Faces",
                          color: RGBAColor(color: .brown),
                          countCard: 8,
                          contents: "üêµüôàüôäüôâüê∂üê±üê≠üêπüê∞ü¶äüêªüêºüêª‚Äç‚ùÑÔ∏èüê®üêØü¶ÅüêÆüê∑üê∏üê≤")
            insertTheme(named: "Flora",
                          color: RGBAColor(color: .green),
                          countCard: 7,
                          contents: "üå≤üå¥üåø‚òòÔ∏èüçÄüçÅüçÑüåæüíêüå∑üåπü•Äüå∫üå∏üåºüåª")
            insertTheme(named: "Weather",
                          color: RGBAColor(color: .cyan),
                          countCard: 8,
                          contents: "‚òÄÔ∏èüå§‚õÖÔ∏èüå•‚òÅÔ∏èüå¶üåß‚õàüå©üå®‚ùÑÔ∏èüí®‚òîÔ∏èüíßüí¶üåä‚òÇÔ∏èüå´üå™")
            insertTheme(named: "COVID",
                          color: RGBAColor(color: .gray),
                          countCard: 5,
                          contents: "üíâü¶†üò∑ü§ßü§í")
            insertTheme(named: "Faces",
                          color: RGBAColor(color: .yellow),
                          countCard: 16,
                          contents: "üòÄüòÉüòÑüòÅüòÜüòÖüòÇü§£ü•≤‚ò∫Ô∏èüòäüòáüôÇüôÉüòâüòåüòçü•∞üòòüòóüòôüòöüòãüòõüòùüòúü§™ü§®üßêü§ìüòéü•∏ü§©ü•≥üòèüòûüòîüòüüòïüôÅ‚òπÔ∏èüò£üòñüò´üò©ü•∫üò¢üò≠üò§üò†üò°ü§Øüò≥ü•∂üò•üòìü§óü§îü§≠ü§´ü§•üò¨üôÑüòØüòßü•±üò¥ü§Æüò∑ü§ß")
        }
    }
        
    // MARK: - Intent

    func theme(at index: Int) -> Theme {
        let safeIndex = min(max(index, 0), themes.count - 1)
        return themes[safeIndex]
    }
    
    func currentTheme() -> Theme {
        return theme(at: currentThemeIndex)
    }
    
    func setCurrentTheme(index: Int) {
        currentThemeIndex = min(max(index, 0), themes.count - 1)
    }

    @discardableResult
    func removeTheme(at index: Int) -> Int {
        if themes.count > 1, themes.indices.contains(index) {
            themes.remove(at: index)
        }
        return index % themes.count
    }

    func insertTheme(named: String,
                     color: RGBAColor,
                     countCard: Int,
                     contents: String) {
        let unique = (themes.max(by: { $0.id < $1.id })?.id ?? 0) + 1
        let theme = Theme(named: named, color: color, contents: contents, countCard: countCard, id: unique)
        themes.append(theme)
    }
    
    func checkErrors() {
        themes = themes.filter{ !$0.named.isEmpty && $0.contents.count > 1 }
        for index in themes.indices {
            if themes[index].countCard > themes[index].contents.count {
                themes[index].countCard = themes[index].contents.count
            }
        }
    }
}
